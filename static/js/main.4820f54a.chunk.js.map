{"version":3,"sources":["components/Subject.js","components/Toc.js","components/Control.js","components/ReadContent.js","components/CreateContent.js","components/UpdateContent.js","App.js","reportWebVitals.js","index.js"],"names":["Subject","href","onClick","e","preventDefault","this","props","onChangePage","bind","title","Component","Toc","newProps","newState","data","list","i","length","push","id","data-id","target","dataset","Control","onChangeMode","type","value","ReadContent","desc","CreateContent","onSubmit","name","placeholder","UpdateContent","state","inputFormHandler","setState","action","method","onChange","App","mode","subject","init","selectedId","contents","maxId","_article","_content","getReadContent","_title","_desc","_contents","Array","from","_id","console","log","className","Number","_mode","window","confirm","splice","alert","getContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4820f54a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Subject extends Component {\r\n    render(){\r\n        return (\r\n        <header>\r\n            {/* 속성 */}\r\n            {/* tag : attribute */}\r\n            {/* react : props */}\r\n            <h1><a href=\"/\" onClick={function(e){\r\n                e.preventDefault();\r\n\r\n                // 함수를 호출  \r\n                this.props.onChangePage();\r\n            }.bind(this)}>{this.props.title}</a></h1>\r\n        </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Subject;","// react 라이브러리에서 Component 클래스를 로딩\r\nimport React, { Component } from 'react';\r\n\r\nclass Toc extends Component {\r\n\r\n    // 컴포넌트에 아무런 값의 변화가 없음에도 render 함수로 인해 불필요한 reload 를 방지\r\n    // render 이전에 실행되는 함수\r\n    // return 값이 true 면 render 값이 호출되고,\r\n    // return 값이 false 면 render 값이 호출되지 않는다.\r\n    // 새로바뀐 값과 이전의 값에 접근할 수 있다.\r\n    // 두개의 매개변수를 갖도록 되어 있음\r\n    // newProps, newState = 속성값이 바뀌었을 때, state 값의 바뀌었을 때\r\n    // push 로 새로운 값을 넣었을 때 원본의 값이 바뀌므로 render 함수가 실행되지 않는다.\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(this.props.data === newProps.data){\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    render(){\r\n        // 컴포넌트 안에서 this 로 전달된 props 값을 직접적인 변경은 금지\r\n        let list = [];\r\n        let data = this.props.data;\r\n        for (let i = 0; i < data.length; i++){\r\n            // 여러개의 el 을 자동으로 생성하는 경우 식별할 수 있는 key 값이 필요\r\n            // key : 리액트 내부에서 필요로 요청하는 값\r\n            list.push(\r\n                <li key={data[i].id}>\r\n                    <a \r\n                        href={\"/content/\"+data[i].id}\r\n                        data-id={data[i].id}\r\n                        onClick={function(e){ //(id, e)\r\n                            e.preventDefault();\r\n                            // data-id 값\r\n                            this.props.onChangePage(e.target.dataset.id);\r\n                        }.bind(this)}>{data[i].title}</a> {/* bind(this, data[i].id) */}\r\n                </li>);\r\n        }\r\n\r\n        return (\r\n        <nav>\r\n            <ul>\r\n                {list}\r\n            </ul>\r\n        </nav>\r\n        );\r\n    }\r\n}\r\n\r\n// 클래스를 외부에서 사용\r\nexport default Toc;","import React, { Component } from 'react';\r\n\r\nclass Control extends Component {\r\n    render(){\r\n        return (\r\n            <ul>\r\n                <li><a href=\"/create\" onClick={function(e){\r\n                    e.preventDefault();\r\n                    this.props.onChangeMode('create');\r\n                }.bind(this)}>create</a></li>\r\n\r\n                <li><a href=\"/update\" onClick={function(e){\r\n                    e.preventDefault();\r\n                    this.props.onChangeMode('update');\r\n                }.bind(this)}>update</a></li>\r\n\r\n                {/* 삭제는 a 와 같은 페이지의 개념이 아닌 버튼으로 수행되는것이 맞는 표현방식 */}\r\n                <li><input type=\"button\" value=\"delete\" onClick={function(e){\r\n                    e.preventDefault();\r\n                    this.props.onChangeMode('delete');\r\n                }.bind(this)}></input></li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;","import React, { Component } from 'react';\r\n\r\nclass ReadContent extends Component {\r\n    render(){\r\n        return (\r\n        <article>\r\n            <h2>{this.props.title}</h2>\r\n            {this.props.desc}\r\n        </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReadContent;","import React, { Component } from 'react';\r\n\r\nclass CreateContent extends Component {\r\n    render(){\r\n        return (\r\n        <article>\r\n            <h2>Create</h2>\r\n            <form onSubmit={function(e){\r\n                e.preventDefault();\r\n                this.props.onSubmit(\r\n                    e.target.title.value,\r\n                    e.target.desc.value\r\n                );\r\n            }.bind(this)}>\r\n                <p><input type=\"text\" name=\"title\" placeholder=\"title\"></input></p>\r\n                <p>\r\n                    <textarea name=\"desc\" placeholder=\"desc\">\r\n                    </textarea>\r\n                </p>\r\n                <p>\r\n                    <input type=\"submit\"></input>\r\n                </p>\r\n\r\n            </form>\r\n        </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateContent;","import React, { Component } from 'react';\r\n\r\nclass UpdateContent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.data.id, // TypeError: Cannot read property 'id' of undefined\r\n            title: this.props.data.title,\r\n            desc: this.props.data.desc\r\n        }\r\n        this.inputFormHandler = this.inputFormHandler.bind(this);\r\n    }\r\n    inputFormHandler(e){\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n    render(){\r\n        return (\r\n        <article>\r\n            <h2>Update</h2>\r\n            <form action=\"/create_process\" method=\"post\" \r\n                onSubmit={function(e){\r\n                e.preventDefault();\r\n                this.props.onSubmit(\r\n                    this.state.id,\r\n\r\n                    // state 와 동기화 되기 때문에\r\n                    this.state.title,\r\n                    this.state.desc\r\n                    // e.target.title.value,\r\n                    // e.target.desc.value\r\n                );\r\n            }.bind(this)}>\r\n                {/* 식별자 역할 */}\r\n                <input type=\"hidden\" name=\"id\" value={this.state.id}></input>\r\n                \r\n                <p>\r\n                    <input type=\"text\"\r\n                        name=\"title\" \r\n                        placeholder=\"title\" \r\n                        \r\n                        // props 값은 read-only → state 로 변형\r\n                        // value={this.props.state.title}>\r\n                        // input 값을 바꿨을 때 state 값을 바뀌게하면 read-only 가 아니게 된다.\r\n                        value={this.state.title}\r\n\r\n                        // state 에 동기화\r\n                        // 내용이 바뀌면서 state 값이 동적으로 바뀐다.\r\n                        onChange={this.inputFormHandler}>\r\n                    </input>\r\n                </p>\r\n                <p>\r\n                    {/* react html : textarea 값을 value 안에 넣어야 한다. */}\r\n                    <textarea name=\"desc\" \r\n                        placeholder=\"desc\"\r\n                        value={this.state.desc}\r\n                        // onChange={this.inputFormHandler.bind(this)}>\r\n                        onChange={this.inputFormHandler}>\r\n                    </textarea>\r\n                </p>\r\n                <p>\r\n                    <input type=\"submit\"></input>\r\n                </p>\r\n            </form>\r\n        </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateContent;","import './App.css';\nimport React, { Component } from 'react';\nimport Subject from './components/Subject';\nimport Toc from './components/Toc';\nimport Control from './components/Control';\nimport ReadContent from './components/ReadContent';\nimport CreateContent from './components/CreateContent';\nimport UpdateContent from './components/UpdateContent';\n\n// debugger\n// 개발자 도구의 디버거 프로그램 실행\n// 작성한 부분에서 실행이 멈춘다.\n// Scope : this 의 값이 있는지 확인할 수 있다.\n// Source : 여러가지 정보들을 보기 쉽게 알려준다.\nclass App extends Component {\n  // 컴포넌트가 실행될 때 render 함수 보다 먼저 실행되서 초기화를 수행\n  constructor(props){\n    super(props);\n    \n    // state 값 초기화\n    // state : 컴포넌트 내부적으로 사용하는 구현에 필요한 데이터\n    // 값이 변동되면 render 함수가 다시 호출된다.\n    this.state = {\n      mode: 'init',\n      subject:{title: 'CRUD'},\n      init:{title:'', desc:'항목을 선택'},\n      selectedId: 0,\n      contents:[\n        {id:1, title:'HTML', desc:'HTML info'},\n        {id:2, title:'CSS', desc:'CSS info'},\n        {id:3, title:'JS', desc:'JS info'}\n      ]\n    }\n    // 불필요한 렌더링 방지를 위해 maxId 생성\n    this.maxId = 3;\n    // state.contents.id.length;\n  }\n  getReadContent(){\n    for(let i=0; i < this.state.contents.length; i++){\n      let data = this.state.contents[i];\n      if(data.id === this.state.selectedId){\n        return data;\n      }\n    }\n  }\n  getContent(){\n    let _title, _desc, _article, _content = null;\n    if(this.state.mode === 'init'){\n      _title = this.state.init.title;\n      _desc = this.state.init.desc;\n    } else if(this.state.mode === 'read'){\n      _content = this.getReadContent();\n      _article = <ReadContent title={_content.title} desc={_content.desc}></ReadContent>;\n    } else if(this.state.mode === 'create'){\n      _article = <CreateContent onSubmit={function(_title, _desc){\n        this.maxId = this.maxId + 1;\n\n        // push : 새로운 데이터를 추가할 때 원본의 값이 변경된다.\n        ///         성능을 개선할 때 까다로움\n        // concat : 새로운 데이터를 추가할 때 원본을 바뀌지 않고, 값을 변수에 담아 사용\n        //          유지보수 유용\n        // let _contents = this.state.contents.concat (\n        //   {id: this.maxId, title: _title, desc: _desc}\n        // )\n\n        // Array.from() : 원본 불변의 법칙, 원본을 복제 후 변형\n        // Object.assign(빈 객체 | 새로운 객체 | 복제한 값을 추가할 객체, 복제할 대상) : 복제된 객체를 만들 때\n        \n        // immutable : 유사 배열, 유사 객체를 제어하는 방법\n        // 모든 명령어들이 불변하기 때문에 일관된 코드를 사용할 수 있다.\n\n        // a = {name: 'test'};\n        // Object.assign({region: 'korea'}, a);\n        // {region: 'korea', name: 'test'}\n        let _contents = Array.from(this.state.contents);\n        _contents.push({id: this.maxId, title: _title, desc: _desc});\n        \n        this.setState({\n          contents: _contents,\n          mode: 'read',\n          selectedId: this.maxId\n        });\n      }.bind(this)}></CreateContent>\n    } else if(this.state.mode === 'update'){\n      _content = this.getReadContent();\n      _article = <UpdateContent data={_content} onSubmit={function(_id, _title, _desc){\n          // 원본을 복제한 새로운 배열\n          let _contents = Array.from(this.state.contents); // TypeError: Cannot read property 'contents' of undefined\n          console.log(\"update _contents\", _contents);\n\n          for(let i = 0; i < _contents.length; i++){\n            if(_contents[i].id === _id){\n              _contents[i] = {id: _id, title: _title, desc: _desc};\n            }\n          }\n\n          this.setState({\n            contents: _contents,\n            mode: 'read'\n          });\n        }.bind(this)}></UpdateContent>;\n    }\n    return _article;\n  }\n  render(){\n    return (\n      <div className=\"App\">\n\n        {/* 가변적인 출력 값 */}\n        {/* {} props 값을 자바스크립트의 코드로 실행 */}\n        {/* props : 사용자가 컴포넌트를 조작하는 부분 */}\n        {/* 컴포넌트 밖에서 props 변경은 허용 */}\n        {/* 상위 컴포넌트의 state 값을 하위 컴포넌트의 props 값으로 전달 */}\n        <Subject \n          title={this.state.subject.title}\n          \n          // 이벤트에 함수를 설치\n          // 함수 안에서는 this 의 값이 아무값도 가지지 않는다.\n          // .bind(this)\n          onChangePage={function(){\n\n            // state 값 설정\n            // 이미 컴포넌트가 생성된 다음에 동적으로 state 값으로 변경할 때\n            // setState 함수안에 변경하고 싶은 값을 객체로 전달\n            this.setState({mode: 'init'});\n          }.bind(this)}>\n        </Subject>\n        <Toc onChangePage={function(id){\n          this.setState({\n            mode: 'read',\n            // string\n            selectedId: Number(id)  \n          });\n        }.bind(this)} data={this.state.contents}>\n        </Toc>\n        <Control onChangeMode={function(_mode){\n          if(_mode === 'delete'){\n            if(window.confirm('really?')){\n              let _contents = Array.from(this.state.contents);\n              for(let i = 0; i < this.state.contents.length; i++){\n                if(_contents[i].id === this.state.selectedId){\n                  // splice : 범위지정, 원본이 변경 됨\n                  _contents.splice(i, 1);\n                }\n              }\n              this.setState({\n                mode: 'init',\n                contents: _contents\n              });\n              alert('delete complete');\n            }\n          } else {\n            this.setState({\n              mode: _mode\n            });\n          }\n        }.bind(this)}></Control>\n        {this.getContent()}\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}